package bits.fft;

import org.junit.Test;

import java.util.Random;

import static org.junit.Assert.assertEquals;


/**
 * @author Philip DeCamp
 */
public class TestBitReverseMethods {

    private static final int REVERSE_TABLE[] = {
            0x00, 0x80, 0x40, 0xC0, 0x20, 0xA0, 0x60, 0xE0, 0x10, 0x90, 0x50, 0xD0, 0x30, 0xB0, 0x70, 0xF0,
            0x08, 0x88, 0x48, 0xC8, 0x28, 0xA8, 0x68, 0xE8, 0x18, 0x98, 0x58, 0xD8, 0x38, 0xB8, 0x78, 0xF8,
            0x04, 0x84, 0x44, 0xC4, 0x24, 0xA4, 0x64, 0xE4, 0x14, 0x94, 0x54, 0xD4, 0x34, 0xB4, 0x74, 0xF4,
            0x0C, 0x8C, 0x4C, 0xCC, 0x2C, 0xAC, 0x6C, 0xEC, 0x1C, 0x9C, 0x5C, 0xDC, 0x3C, 0xBC, 0x7C, 0xFC,
            0x02, 0x82, 0x42, 0xC2, 0x22, 0xA2, 0x62, 0xE2, 0x12, 0x92, 0x52, 0xD2, 0x32, 0xB2, 0x72, 0xF2,
            0x0A, 0x8A, 0x4A, 0xCA, 0x2A, 0xAA, 0x6A, 0xEA, 0x1A, 0x9A, 0x5A, 0xDA, 0x3A, 0xBA, 0x7A, 0xFA,
            0x06, 0x86, 0x46, 0xC6, 0x26, 0xA6, 0x66, 0xE6, 0x16, 0x96, 0x56, 0xD6, 0x36, 0xB6, 0x76, 0xF6,
            0x0E, 0x8E, 0x4E, 0xCE, 0x2E, 0xAE, 0x6E, 0xEE, 0x1E, 0x9E, 0x5E, 0xDE, 0x3E, 0xBE, 0x7E, 0xFE,
            0x01, 0x81, 0x41, 0xC1, 0x21, 0xA1, 0x61, 0xE1, 0x11, 0x91, 0x51, 0xD1, 0x31, 0xB1, 0x71, 0xF1,
            0x09, 0x89, 0x49, 0xC9, 0x29, 0xA9, 0x69, 0xE9, 0x19, 0x99, 0x59, 0xD9, 0x39, 0xB9, 0x79, 0xF9,
            0x05, 0x85, 0x45, 0xC5, 0x25, 0xA5, 0x65, 0xE5, 0x15, 0x95, 0x55, 0xD5, 0x35, 0xB5, 0x75, 0xF5,
            0x0D, 0x8D, 0x4D, 0xCD, 0x2D, 0xAD, 0x6D, 0xED, 0x1D, 0x9D, 0x5D, 0xDD, 0x3D, 0xBD, 0x7D, 0xFD,
            0x03, 0x83, 0x43, 0xC3, 0x23, 0xA3, 0x63, 0xE3, 0x13, 0x93, 0x53, 0xD3, 0x33, 0xB3, 0x73, 0xF3,
            0x0B, 0x8B, 0x4B, 0xCB, 0x2B, 0xAB, 0x6B, 0xEB, 0x1B, 0x9B, 0x5B, 0xDB, 0x3B, 0xBB, 0x7B, 0xFB,
            0x07, 0x87, 0x47, 0xC7, 0x27, 0xA7, 0x67, 0xE7, 0x17, 0x97, 0x57, 0xD7, 0x37, 0xB7, 0x77, 0xF7,
            0x0F, 0x8F, 0x4F, 0xCF, 0x2F, 0xAF, 0x6F, 0xEF, 0x1F, 0x9F, 0x5F, 0xDF, 0x3F, 0xBF, 0x7F, 0xFF
    };

    private static final byte REVERSE_BYTE[] = {
            (byte)0x00, (byte)0x80, (byte)0x40, (byte)0xC0, (byte)0x20, (byte)0xA0, (byte)0x60, (byte)0xE0, (byte)0x10, (byte)0x90, (byte)0x50, (byte)0xD0, (byte)0x30, (byte)0xB0, (byte)0x70, (byte)0xF0,
            (byte)0x08, (byte)0x88, (byte)0x48, (byte)0xC8, (byte)0x28, (byte)0xA8, (byte)0x68, (byte)0xE8, (byte)0x18, (byte)0x98, (byte)0x58, (byte)0xD8, (byte)0x38, (byte)0xB8, (byte)0x78, (byte)0xF8,
            (byte)0x04, (byte)0x84, (byte)0x44, (byte)0xC4, (byte)0x24, (byte)0xA4, (byte)0x64, (byte)0xE4, (byte)0x14, (byte)0x94, (byte)0x54, (byte)0xD4, (byte)0x34, (byte)0xB4, (byte)0x74, (byte)0xF4,
            (byte)0x0C, (byte)0x8C, (byte)0x4C, (byte)0xCC, (byte)0x2C, (byte)0xAC, (byte)0x6C, (byte)0xEC, (byte)0x1C, (byte)0x9C, (byte)0x5C, (byte)0xDC, (byte)0x3C, (byte)0xBC, (byte)0x7C, (byte)0xFC,
            (byte)0x02, (byte)0x82, (byte)0x42, (byte)0xC2, (byte)0x22, (byte)0xA2, (byte)0x62, (byte)0xE2, (byte)0x12, (byte)0x92, (byte)0x52, (byte)0xD2, (byte)0x32, (byte)0xB2, (byte)0x72, (byte)0xF2,
            (byte)0x0A, (byte)0x8A, (byte)0x4A, (byte)0xCA, (byte)0x2A, (byte)0xAA, (byte)0x6A, (byte)0xEA, (byte)0x1A, (byte)0x9A, (byte)0x5A, (byte)0xDA, (byte)0x3A, (byte)0xBA, (byte)0x7A, (byte)0xFA,
            (byte)0x06, (byte)0x86, (byte)0x46, (byte)0xC6, (byte)0x26, (byte)0xA6, (byte)0x66, (byte)0xE6, (byte)0x16, (byte)0x96, (byte)0x56, (byte)0xD6, (byte)0x36, (byte)0xB6, (byte)0x76, (byte)0xF6,
            (byte)0x0E, (byte)0x8E, (byte)0x4E, (byte)0xCE, (byte)0x2E, (byte)0xAE, (byte)0x6E, (byte)0xEE, (byte)0x1E, (byte)0x9E, (byte)0x5E, (byte)0xDE, (byte)0x3E, (byte)0xBE, (byte)0x7E, (byte)0xFE,
            (byte)0x01, (byte)0x81, (byte)0x41, (byte)0xC1, (byte)0x21, (byte)0xA1, (byte)0x61, (byte)0xE1, (byte)0x11, (byte)0x91, (byte)0x51, (byte)0xD1, (byte)0x31, (byte)0xB1, (byte)0x71, (byte)0xF1,
            (byte)0x09, (byte)0x89, (byte)0x49, (byte)0xC9, (byte)0x29, (byte)0xA9, (byte)0x69, (byte)0xE9, (byte)0x19, (byte)0x99, (byte)0x59, (byte)0xD9, (byte)0x39, (byte)0xB9, (byte)0x79, (byte)0xF9,
            (byte)0x05, (byte)0x85, (byte)0x45, (byte)0xC5, (byte)0x25, (byte)0xA5, (byte)0x65, (byte)0xE5, (byte)0x15, (byte)0x95, (byte)0x55, (byte)0xD5, (byte)0x35, (byte)0xB5, (byte)0x75, (byte)0xF5,
            (byte)0x0D, (byte)0x8D, (byte)0x4D, (byte)0xCD, (byte)0x2D, (byte)0xAD, (byte)0x6D, (byte)0xED, (byte)0x1D, (byte)0x9D, (byte)0x5D, (byte)0xDD, (byte)0x3D, (byte)0xBD, (byte)0x7D, (byte)0xFD,
            (byte)0x03, (byte)0x83, (byte)0x43, (byte)0xC3, (byte)0x23, (byte)0xA3, (byte)0x63, (byte)0xE3, (byte)0x13, (byte)0x93, (byte)0x53, (byte)0xD3, (byte)0x33, (byte)0xB3, (byte)0x73, (byte)0xF3,
            (byte)0x0B, (byte)0x8B, (byte)0x4B, (byte)0xCB, (byte)0x2B, (byte)0xAB, (byte)0x6B, (byte)0xEB, (byte)0x1B, (byte)0x9B, (byte)0x5B, (byte)0xDB, (byte)0x3B, (byte)0xBB, (byte)0x7B, (byte)0xFB,
            (byte)0x07, (byte)0x87, (byte)0x47, (byte)0xC7, (byte)0x27, (byte)0xA7, (byte)0x67, (byte)0xE7, (byte)0x17, (byte)0x97, (byte)0x57, (byte)0xD7, (byte)0x37, (byte)0xB7, (byte)0x77, (byte)0xF7,
            (byte)0x0F, (byte)0x8F, (byte)0x4F, (byte)0xCF, (byte)0x2F, (byte)0xAF, (byte)0x6F, (byte)0xEF, (byte)0x1F, (byte)0x9F, (byte)0x5F, (byte)0xDF, (byte)0x3F, (byte)0xBF, (byte)0x7F, (byte)0xFF
    };



    static int reverse1( int val ) {
        long v = (((((val >>> 24)       ) * 0x0202020202L & 0x010884422010L) % 1023L)      ) |
                 (((((val >>> 16) & 0xFF) * 0x0202020202L & 0x010884422010L) % 1023L) << 8 ) |
                 (((((val >>>  8) & 0xFF) * 0x0202020202L & 0x010884422010L) % 1023L) << 16) |
                 (((((val       ) & 0xFF) * 0x0202020202L & 0x010884422010L) % 1023L) << 24);

        return (int)v;
    }

    static int reverse2( int x ) {
        x = ((( x & 0xaaaaaaaa ) >>> 1 ) | (( x & 0x55555555 ) << 1));
        x = ((( x & 0xcccccccc ) >>> 2 ) | (( x & 0x33333333 ) << 2));
        x = ((( x & 0xf0f0f0f0 ) >>> 4 ) | (( x & 0x0f0f0f0f ) << 4));
        x = ((( x & 0xff00ff00 ) >>> 8 ) | (( x & 0x00ff00ff ) << 8));
        return((x >>> 16) | (x << 16));
    }

    static int reverse3( int val ) {
        return ( REVERSE_TABLE[   val         & 0xff] << 24) |
               ( REVERSE_TABLE[ ( val >>  8 ) & 0xff] << 16) |
               ( REVERSE_TABLE[ ( val >> 16 ) & 0xff] <<  8) |
               ( REVERSE_TABLE[ ( val >> 24 ) & 0xff]      );
    }

    static int reverse4( int val ) {
        return ( ( REVERSE_BYTE[ val       & 0xFF ] & 0xFF ) << 24 ) |
               ( ( REVERSE_BYTE[ val >>  8 & 0xFF ] & 0xFF ) << 16 ) |
               ( ( REVERSE_BYTE[ val >> 16 & 0xFF ] & 0xFF ) <<  8 ) |
               ( ( REVERSE_BYTE[ val >> 24 & 0xFF ] & 0xFF )       );
    }


    @Test
    public void testSpeed() {
        long t1 = 0;
        long t2 = 0;
        long t3 = 0;
        long t4 = 0;

        for( int i = 0; i < 1000; i++ ) {
            long start = System.nanoTime();
            for( int j = 0; j < 10000; j++ ) {
                reverse1( j * i );
            }
            t1 += System.nanoTime() - start;

            start = System.nanoTime();
            for( int j = 0; j < 10000; j++ ) {
                reverse2( j * i );
            }
            t2 += System.nanoTime() - start;

            start = System.nanoTime();
            for( int j = 0; j < 10000; j++ ) {
                reverse3( j * i );
            }
            t3 += System.nanoTime() - start;

            start = System.nanoTime();
            for( int j = 0; j < 10000; j++ ) {
                reverse4( j * i );
            }
            t4 += System.nanoTime() - start;
        }

        System.out.println( "1: " + ( t1 / 1000000000.0 ) );
        System.out.println( "2: " + ( t2 / 1000000000.0 ) );
        System.out.println( "3: " + ( t3 / 1000000000.0 ) );
        System.out.println( "4: " + ( t4 / 1000000000.0 ) );

    }

    @Test
    public void testAccurate() {
        Random rand = new Random( 1 );


        for( int i = 0; i < 100; i++ ) {
            int v = rand.nextInt();
            int r1 = reverse1( v );
            int r2 = reverse2( v );
            int r3 = reverse3( v );
            int r4 = reverse4( v );

            check( v, r1, r2 );
            check( v, r1, r3 );
            check( v, r1, r4 );
        }
    }



    private void check( int n, int a, int b ) {
        if( a != b ) {
            System.out.println( bin( n ) );
            System.out.println( bin( a ) );
            System.out.println( bin( b ) );
            assertEquals( a, b );
        }
    }

    private String bin( int v ) {
        return String.format( "%16s", Integer.toBinaryString( v ) ).replace( ' ', '0' );
    }
}
